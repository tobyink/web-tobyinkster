<?xml version="1.0" encoding="UTF-8"?>
<entry xmlns="http://www.w3.org/2005/Atom">
    <title>Exploring Type::Tiny Part 1: Using Type::Params for Validating Function Parameters</title>
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/toby_inkster/2018/07/exploring-typetiny-part-1-using-typeparams-for-validating-function-parameters.html"/>
    <id>tag:blogs.perl.org,2018:/users/toby_inkster//1019.8838</id>

    <published>2018-07-30T18:40:33Z</published>
    <updated>2018-08-06T18:25:58Z</updated>

    <summary> Type::Tiny is probably best known as a way of having Moose-like type constraints in Moo, but it can be used for so much more. This is the first in a series of posts showing other things you can use...</summary>
    <author>
        <name>Toby Inkster</name>
        <uri>http://toby.ink/</uri>
    </author>
    
        <category term="Type-Tiny" scheme="http://www.sixapart.com/ns/types#category"/>
    
    <category term="typetiny" label="Type-Tiny" scheme="http://www.sixapart.com/ns/types#tag"/>
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/toby_inkster/">
        <![CDATA[		<p><a class="podlinkpod" href="https://metacpan.org/pod/Type%3A%3ATiny">Type::Tiny</a> is probably best known as a way of having Moose-like type constraints in <a class="podlinkpod" href="https://metacpan.org/pod/Moo">Moo</a>, but it can be used for so much more. This is the first in a series of posts showing other things you can use Type::Tiny for.</p>
		<p>Let's imagine you have a function which takes three parameters, a colour, a string of text, and a filehandle. Something like this:</p>
		<pre class="highlighting-perl">  <span class="keyword" style="color:#009;font-weight:bold">sub</span> <span class="word">htmlprint</span> <span class="structure">{</span>
    <span class="keyword" style="color:#009;font-weight:bold">my</span> <span class="symbol" style="color:#333;background-color:#fcc">%arg</span> <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="magic" style="color:#900;font-weight:bold">@_</span><span class="structure">;</span>
    <span class="symbol" style="color:#333;background-color:#fcc">$arg</span><span class="structure">{</span><span class="word">file</span><span class="structure">}</span><span class="operator" style="color:#000;font-weight:bold">-&gt;</span><span class="word">printf</span><span class="structure">(</span>
      <span class="single" style="color:#909">'&lt;span style="color:%s"&gt;%s&lt;/span&gt;'</span><span class="operator" style="color:#000;font-weight:bold">,</span>
      <span class="symbol" style="color:#333;background-color:#fcc">$arg</span><span class="structure">{</span><span class="word">colour</span><span class="structure">}</span><span class="operator" style="color:#000;font-weight:bold">,</span>
      <span class="symbol" style="color:#333;background-color:#fcc">$arg</span><span class="structure">{</span><span class="word">text</span><span class="structure">}</span><span class="operator" style="color:#000;font-weight:bold">,</span>
    <span class="structure">);</span>
  <span class="structure">}</span></pre>
		<p>Nice little function. Simple enough. But if people call it like this:</p>
		<pre class="highlighting-perl">  <span class="word">htmlprint</span><span class="structure">(</span> <span class="word">file</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="symbol" style="color:#333;background-color:#fcc">$fh</span><span class="operator" style="color:#000;font-weight:bold">,</span> <span class="word">text</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="double" style="color:#909">"Hello world"</span><span class="operator" style="color:#000;font-weight:bold">,</span> <span class="word">color</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="double" style="color:#909">"red"</span> <span class="structure">);</span></pre>
		<p>... then they'll get weird and unexpected behaviour. Have you spotted the mistake?</p>
]]>
        <![CDATA[		<p>Yes, "colour" versus "color".</p>
		<p>So it's often good to perform some kind of checking of incoming data in user-facing functions. (Private functions which aren't part of your external API might not require such rigourous checks.)</p>
		<p>Let's see how you might do that in Perl:</p>
		<pre class="highlighting-perl">  <span class="keyword" style="color:#009;font-weight:bold">use</span> <span class="word">Carp</span> <span class="words" style="color:#333;background-color:#ffc">qw(croak)</span><span class="structure">;</span>
  
  <span class="keyword" style="color:#009;font-weight:bold">sub</span> <span class="word">htmlprint</span> <span class="structure">{</span>
    <span class="keyword" style="color:#009;font-weight:bold">my</span> <span class="symbol" style="color:#333;background-color:#fcc">%arg</span> <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="magic" style="color:#900;font-weight:bold">@_</span><span class="structure">;</span>
    <span class="word">exists</span> <span class="symbol" style="color:#333;background-color:#fcc">$arg</span><span class="structure">{</span><span class="word">file</span><span class="structure">}</span>   <span class="operator" style="color:#000;font-weight:bold">or</span> <span class="word">croak</span> <span class="double" style="color:#909">"Expected file"</span><span class="structure">;</span>
    <span class="word">exists</span> <span class="symbol" style="color:#333;background-color:#fcc">$arg</span><span class="structure">{</span><span class="word">text</span><span class="structure">}</span>   <span class="operator" style="color:#000;font-weight:bold">or</span> <span class="word">croak</span> <span class="double" style="color:#909">"Expected text"</span><span class="structure">;</span>
    <span class="word">exists</span> <span class="symbol" style="color:#333;background-color:#fcc">$arg</span><span class="structure">{</span><span class="word">colour</span><span class="structure">}</span> <span class="operator" style="color:#000;font-weight:bold">or</span> <span class="word">croak</span> <span class="double" style="color:#909">"Expected colour"</span><span class="structure">;</span>
    
    <span class="symbol" style="color:#333;background-color:#fcc">$arg</span><span class="structure">{</span><span class="word">file</span><span class="structure">}</span><span class="operator" style="color:#000;font-weight:bold">-&gt;</span><span class="word">printf</span><span class="structure">(</span>
      <span class="single" style="color:#909">'&lt;span style="color:%s"&gt;%s&lt;/span&gt;'</span><span class="operator" style="color:#000;font-weight:bold">,</span>
      <span class="symbol" style="color:#333;background-color:#fcc">$arg</span><span class="structure">{</span><span class="word">colour</span><span class="structure">}</span><span class="operator" style="color:#000;font-weight:bold">,</span>
      <span class="symbol" style="color:#333;background-color:#fcc">$arg</span><span class="structure">{</span><span class="word">text</span><span class="structure">}</span><span class="operator" style="color:#000;font-weight:bold">,</span>
    <span class="structure">);</span>
  <span class="structure">}</span></pre>
		<p>But of course, this is only a bare minimum. We could go further and check that <code>$arg{file}</code> is a filehandle (or at least an object with a <code>printf</code> method), and that <code>$arg{text}</code> and <code>$arg{colour}</code> are strings.</p>
		<pre class="highlighting-perl">  <span class="keyword" style="color:#009;font-weight:bold">use</span> <span class="word">Carp</span> <span class="words" style="color:#333;background-color:#ffc">qw(croak)</span><span class="structure">;</span>
  <span class="keyword" style="color:#009;font-weight:bold">use</span> <span class="word">Scalar::Util</span> <span class="words" style="color:#333;background-color:#ffc">qw(blessed)</span><span class="structure">;</span>
  
  <span class="keyword" style="color:#009;font-weight:bold">sub</span> <span class="word">htmlprint</span> <span class="structure">{</span>
    <span class="keyword" style="color:#009;font-weight:bold">my</span> <span class="symbol" style="color:#333;background-color:#fcc">%arg</span> <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="magic" style="color:#900;font-weight:bold">@_</span><span class="structure">;</span>
    <span class="word">exists</span> <span class="symbol" style="color:#333;background-color:#fcc">$arg</span><span class="structure">{</span><span class="word">file</span><span class="structure">}</span>   <span class="operator" style="color:#000;font-weight:bold">or</span> <span class="word">croak</span> <span class="double" style="color:#909">"Expected file"</span><span class="structure">;</span>
    <span class="word">exists</span> <span class="symbol" style="color:#333;background-color:#fcc">$arg</span><span class="structure">{</span><span class="word">text</span><span class="structure">}</span>   <span class="operator" style="color:#000;font-weight:bold">or</span> <span class="word">croak</span> <span class="double" style="color:#909">"Expected text"</span><span class="structure">;</span>
    <span class="word">exists</span> <span class="symbol" style="color:#333;background-color:#fcc">$arg</span><span class="structure">{</span><span class="word">colour</span><span class="structure">}</span> <span class="operator" style="color:#000;font-weight:bold">or</span> <span class="word">croak</span> <span class="double" style="color:#909">"Expected colour"</span><span class="structure">;</span>
    
    <span class="word">ref</span><span class="structure">(</span><span class="symbol" style="color:#333;background-color:#fcc">$arg</span><span class="structure">{</span><span class="word">file</span><span class="structure">})</span> <span class="operator" style="color:#000;font-weight:bold">eq</span> <span class="single" style="color:#909">'GLOB'</span>
      <span class="operator" style="color:#000;font-weight:bold">or</span> <span class="word">blessed</span><span class="structure">(</span><span class="symbol" style="color:#333;background-color:#fcc">$arg</span><span class="structure">{</span><span class="word">file</span><span class="structure">})</span> <span class="operator" style="color:#000;font-weight:bold">&amp;&amp;</span> <span class="symbol" style="color:#333;background-color:#fcc">$arg</span><span class="structure">{</span><span class="word">file</span><span class="structure">}</span><span class="operator" style="color:#000;font-weight:bold">-&gt;</span><span class="word">can</span><span class="structure">(</span><span class="single" style="color:#909">'printf'</span><span class="structure">)</span>
      <span class="operator" style="color:#000;font-weight:bold">or</span> <span class="word">croak</span> <span class="double" style="color:#909">"File should be a filehandle or object"</span><span class="structure">;</span>
    
    <span class="core" style="color:#009;font-weight:bold">defined</span><span class="structure">(</span><span class="symbol" style="color:#333;background-color:#fcc">$arg</span><span class="structure">{</span><span class="word">text</span><span class="structure">}</span> <span class="operator" style="color:#000;font-weight:bold">&amp;&amp;</span> <span class="operator" style="color:#000;font-weight:bold">!</span><span class="word">ref</span><span class="structure">(</span><span class="symbol" style="color:#333;background-color:#fcc">$arg</span><span class="structure">{</span><span class="word">text</span><span class="structure">})</span>
      <span class="operator" style="color:#000;font-weight:bold">or</span> <span class="word">croak</span> <span class="double" style="color:#909">"Text should be a string"</span><span class="structure">;</span>
    
    <span class="core" style="color:#009;font-weight:bold">defined</span><span class="structure">(</span><span class="symbol" style="color:#333;background-color:#fcc">$arg</span><span class="structure">{</span><span class="word">colour</span><span class="structure">}</span> <span class="operator" style="color:#000;font-weight:bold">&amp;&amp;</span> <span class="operator" style="color:#000;font-weight:bold">!</span><span class="word">ref</span><span class="structure">(</span><span class="symbol" style="color:#333;background-color:#fcc">$arg</span><span class="structure">{</span><span class="word">colour</span><span class="structure">})</span>
      <span class="operator" style="color:#000;font-weight:bold">or</span> <span class="word">croak</span> <span class="double" style="color:#909">"Colour should be a string"</span><span class="structure">;</span>
    
    <span class="symbol" style="color:#333;background-color:#fcc">$arg</span><span class="structure">{</span><span class="word">file</span><span class="structure">}</span><span class="operator" style="color:#000;font-weight:bold">-&gt;</span><span class="word">printf</span><span class="structure">(</span>
      <span class="single" style="color:#909">'&lt;span style="color:%s"&gt;%s&lt;/span&gt;'</span><span class="operator" style="color:#000;font-weight:bold">,</span>
      <span class="symbol" style="color:#333;background-color:#fcc">$arg</span><span class="structure">{</span><span class="word">colour</span><span class="structure">}</span><span class="operator" style="color:#000;font-weight:bold">,</span>
      <span class="symbol" style="color:#333;background-color:#fcc">$arg</span><span class="structure">{</span><span class="word">text</span><span class="structure">}</span><span class="operator" style="color:#000;font-weight:bold">,</span>
    <span class="structure">);</span>
  <span class="structure">}</span></pre>
		<p>Suddenly our nice little function isn't looking so little any more. Type::Tiny and friends to the rescue!</p>
		<p>Type::Tiny comes bundled with a module called <a class="podlinkpod" href="https://metacpan.org/pod/Type%3A%3AParams">Type::Params</a> which is designed for just this sort of thing. Let's see how it can be used.</p>
		<pre class="highlighting-perl">  <span class="keyword" style="color:#009;font-weight:bold">use</span> <span class="pragma" style="color:#009">feature</span> <span class="words" style="color:#333;background-color:#ffc">qw(state)</span><span class="structure">;</span>
  <span class="keyword" style="color:#009;font-weight:bold">use</span> <span class="word">Type::Params</span> <span class="words" style="color:#333;background-color:#ffc">qw(compile_named)</span><span class="structure">;</span>
  <span class="keyword" style="color:#009;font-weight:bold">use</span> <span class="word">Types::Standard</span> <span class="words" style="color:#333;background-color:#ffc">qw(FileHandle HasMethods Str)</span><span class="structure">;</span>
  
  <span class="keyword" style="color:#009;font-weight:bold">sub</span> <span class="word">htmlprint</span> <span class="structure">{</span>
    <span class="word">state</span> <span class="symbol" style="color:#333;background-color:#fcc">$check</span> <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="word">compile_named</span><span class="structure">(</span>
      <span class="word">file</span>   <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="word">FileHandle</span> <span class="operator" style="color:#000;font-weight:bold">|</span> <span class="word">HasMethods</span><span class="structure">[</span><span class="single" style="color:#909">'printf'</span><span class="structure">]</span><span class="operator" style="color:#000;font-weight:bold">,</span>
      <span class="word">text</span>   <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="word">Str</span><span class="operator" style="color:#000;font-weight:bold">,</span>
      <span class="word">colour</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="word">Str</span><span class="operator" style="color:#000;font-weight:bold">,</span>
    <span class="structure">);</span>
    <span class="keyword" style="color:#009;font-weight:bold">my</span> <span class="symbol" style="color:#333;background-color:#fcc">$arg</span> <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="symbol" style="color:#333;background-color:#fcc">$check</span><span class="operator" style="color:#000;font-weight:bold">-&gt;</span><span class="structure">(</span><span class="magic" style="color:#900;font-weight:bold">@_</span><span class="structure">);</span>
    
    <span class="symbol" style="color:#333;background-color:#fcc">$arg</span><span class="operator" style="color:#000;font-weight:bold">-&gt;</span><span class="structure">{</span><span class="word">file</span><span class="structure">}</span><span class="operator" style="color:#000;font-weight:bold">-&gt;</span><span class="word">printf</span><span class="structure">(</span>
      <span class="single" style="color:#909">'&lt;span style="color:%s"&gt;%s&lt;/span&gt;'</span><span class="operator" style="color:#000;font-weight:bold">,</span>
      <span class="symbol" style="color:#333;background-color:#fcc">$arg</span><span class="operator" style="color:#000;font-weight:bold">-&gt;</span><span class="structure">{</span><span class="word">colour</span><span class="structure">}</span><span class="operator" style="color:#000;font-weight:bold">,</span>
      <span class="symbol" style="color:#333;background-color:#fcc">$arg</span><span class="operator" style="color:#000;font-weight:bold">-&gt;</span><span class="structure">{</span><span class="word">text</span><span class="structure">}</span><span class="operator" style="color:#000;font-weight:bold">,</span>
    <span class="structure">);</span>
  <span class="structure">}</span></pre>
		<p>This looks a lot neater and the code is pretty self-documenting. And you can use the same type constraints you might already be using in your object attributes.</p>
		<p>So what's going on here? <code>$check</code> is a super-optimized coderef for checking the function's parameters, built using the same code inlining techniques used by Moose and Moo constructors and accessors. While it runs very fast, it is kind of slow to build it, which is why we store it in a <code>state</code> variable. That way it only gets compiled once when the function is first called, and can then be reused for each subsequent call.</p>
		<p>If you're stuck with Perl 5.8 so can't use <code>state</code>, then it's easy enough to do something similar with normal lexical variables:</p>
		<pre class="highlighting-perl">  <span class="keyword" style="color:#009;font-weight:bold">use</span> <span class="word">Type::Params</span> <span class="words" style="color:#333;background-color:#ffc">qw(compile_named)</span><span class="structure">;</span>
  <span class="keyword" style="color:#009;font-weight:bold">use</span> <span class="word">Types::Standard</span> <span class="words" style="color:#333;background-color:#ffc">qw(FileHandle HasMethods Str)</span><span class="structure">;</span>
  
  <span class="keyword" style="color:#009;font-weight:bold">my</span> <span class="symbol" style="color:#333;background-color:#fcc">$_check_htmlprint</span><span class="structure">;</span>
  <span class="keyword" style="color:#009;font-weight:bold">sub</span> <span class="word">htmlprint</span> <span class="structure">{</span>
    <span class="symbol" style="color:#333;background-color:#fcc">$_check_htmlprint</span> <span class="operator" style="color:#000;font-weight:bold">||=</span> <span class="word">compile_named</span><span class="structure">(</span>
      <span class="word">file</span>   <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="word">FileHandle</span> <span class="operator" style="color:#000;font-weight:bold">|</span> <span class="word">HasMethods</span><span class="structure">[</span><span class="single" style="color:#909">'printf'</span><span class="structure">]</span><span class="operator" style="color:#000;font-weight:bold">,</span>
      <span class="word">text</span>   <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="word">Str</span><span class="operator" style="color:#000;font-weight:bold">,</span>
      <span class="word">colour</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="word">Str</span><span class="operator" style="color:#000;font-weight:bold">,</span>
    <span class="structure">);</span>
    <span class="keyword" style="color:#009;font-weight:bold">my</span> <span class="symbol" style="color:#333;background-color:#fcc">$arg</span> <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="symbol" style="color:#333;background-color:#fcc">$_check_htmlprint</span><span class="operator" style="color:#000;font-weight:bold">-&gt;</span><span class="structure">(</span><span class="magic" style="color:#900;font-weight:bold">@_</span><span class="structure">);</span>
    
    <span class="operator" style="color:#000;font-weight:bold">...</span><span class="structure">;</span>  <span class="comment" style="color:#060;font-style:italic"># rest of the function goes here</span>
  <span class="structure">}</span></pre>
		<p>As a bonus, it actually checks <i>more</i> things for you than our earlier approach. In particular, it will complain if you try to pass extra unknown parameters:</p>
		<pre class="highlighting-perl"><span class="comment" style="color:#060;font-style:italic">  # will throw an exception because of 'size'
</span>  <span class="word">htmlprint</span><span class="structure">(</span> <span class="word">file</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="symbol" style="color:#333;background-color:#fcc">$fh</span><span class="operator" style="color:#000;font-weight:bold">,</span> <span class="word">text</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="double" style="color:#909">"Hello world"</span><span class="operator" style="color:#000;font-weight:bold">,</span> <span class="word">colour</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="double" style="color:#909">"red"</span><span class="operator" style="color:#000;font-weight:bold">,</span> <span class="word">size</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="number" style="color:#39C">7</span> <span class="structure">);</span></pre>
		<p>And it will allow you to call the function passing a hashref of parameters:</p>
		<pre class="highlighting-perl">  <span class="word">htmlprint</span><span class="structure">({</span> <span class="word">file</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="symbol" style="color:#333;background-color:#fcc">$fh</span><span class="operator" style="color:#000;font-weight:bold">,</span> <span class="word">text</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="double" style="color:#909">"Hello world"</span><span class="operator" style="color:#000;font-weight:bold">,</span> <span class="word">colour</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="double" style="color:#909">"red"</span> <span class="structure">});</span></pre>
		<p>Since Type::Tiny 1.004000 you can also supply defaults for missing parameters:</p>
		<pre class="highlighting-perl">  <span class="keyword" style="color:#009;font-weight:bold">use</span> <span class="pragma" style="color:#009">feature</span> <span class="words" style="color:#333;background-color:#ffc">qw(state)</span><span class="structure">;</span>
  <span class="keyword" style="color:#009;font-weight:bold">use</span> <span class="word">Type::Params</span> <span class="float">1.004000</span> <span class="words" style="color:#333;background-color:#ffc">qw(compile_named)</span><span class="structure">;</span>
  <span class="keyword" style="color:#009;font-weight:bold">use</span> <span class="word">Types::Standard</span> <span class="words" style="color:#333;background-color:#ffc">qw(FileHandle HasMethods Str)</span><span class="structure">;</span>
  
  <span class="keyword" style="color:#009;font-weight:bold">sub</span> <span class="word">htmlprint</span> <span class="structure">{</span>
    <span class="word">state</span> <span class="symbol" style="color:#333;background-color:#fcc">$check</span> <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="word">compile_named</span><span class="structure">(</span>
      <span class="word">file</span>   <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="word">FileHandle</span> <span class="operator" style="color:#000;font-weight:bold">|</span> <span class="word">HasMethods</span><span class="structure">[</span><span class="single" style="color:#909">'printf'</span><span class="structure">]</span><span class="operator" style="color:#000;font-weight:bold">,</span>
      <span class="word">text</span>   <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="word">Str</span><span class="operator" style="color:#000;font-weight:bold">,</span>
      <span class="word">colour</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="word">Str</span><span class="operator" style="color:#000;font-weight:bold">,</span> <span class="structure">{</span> <span class="word">default</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="double" style="color:#909">"black"</span> <span class="structure">}</span><span class="operator" style="color:#000;font-weight:bold">,</span>
    <span class="structure">);</span>
    <span class="keyword" style="color:#009;font-weight:bold">my</span> <span class="symbol" style="color:#333;background-color:#fcc">$arg</span> <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="symbol" style="color:#333;background-color:#fcc">$check</span><span class="operator" style="color:#000;font-weight:bold">-&gt;</span><span class="structure">(</span><span class="magic" style="color:#900;font-weight:bold">@_</span><span class="structure">);</span>
    
    <span class="operator" style="color:#000;font-weight:bold">...</span><span class="structure">;</span>  <span class="comment" style="color:#060;font-style:italic"># rest of the function goes here</span>
  <span class="structure">}</span></pre>
		<h2><span id="Protecting_Against_Typos_Inside_the_Function">Protecting Against Typos Inside the Function</span></h2>
		<p>Recent versions of Type::Params allow you to return an object instead of a hashref from <code>$check</code>. To do this, use <code>compile_named_oo</code> instead of <code>compile_named</code></p>
		<pre class="highlighting-perl">  <span class="keyword" style="color:#009;font-weight:bold">use</span> <span class="pragma" style="color:#009">feature</span> <span class="words" style="color:#333;background-color:#ffc">qw(state)</span><span class="structure">;</span>
  <span class="keyword" style="color:#009;font-weight:bold">use</span> <span class="word">Type::Params</span> <span class="float">1.004000</span> <span class="words" style="color:#333;background-color:#ffc">qw(compile_named_oo)</span><span class="structure">;</span>
  <span class="keyword" style="color:#009;font-weight:bold">use</span> <span class="word">Types::Standard</span> <span class="words" style="color:#333;background-color:#ffc">qw(FileHandle HasMethods Str)</span><span class="structure">;</span>
  
  <span class="keyword" style="color:#009;font-weight:bold">sub</span> <span class="word">htmlprint</span> <span class="structure">{</span>
    <span class="word">state</span> <span class="symbol" style="color:#333;background-color:#fcc">$check</span> <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="word">compile_named_oo</span><span class="structure">(</span>
      <span class="word">file</span>   <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="word">FileHandle</span> <span class="operator" style="color:#000;font-weight:bold">|</span> <span class="word">HasMethods</span><span class="structure">[</span><span class="single" style="color:#909">'printf'</span><span class="structure">]</span><span class="operator" style="color:#000;font-weight:bold">,</span>
      <span class="word">text</span>   <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="word">Str</span><span class="operator" style="color:#000;font-weight:bold">,</span>
      <span class="word">colour</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="word">Str</span><span class="operator" style="color:#000;font-weight:bold">,</span> <span class="structure">{</span> <span class="word">default</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="double" style="color:#909">"black"</span> <span class="structure">}</span><span class="operator" style="color:#000;font-weight:bold">,</span>
    <span class="structure">);</span>
    <span class="keyword" style="color:#009;font-weight:bold">my</span> <span class="symbol" style="color:#333;background-color:#fcc">$arg</span> <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="symbol" style="color:#333;background-color:#fcc">$check</span><span class="operator" style="color:#000;font-weight:bold">-&gt;</span><span class="structure">(</span><span class="magic" style="color:#900;font-weight:bold">@_</span><span class="structure">);</span>
    
    <span class="symbol" style="color:#333;background-color:#fcc">$arg</span><span class="operator" style="color:#000;font-weight:bold">-&gt;</span><span class="word">file</span><span class="operator" style="color:#000;font-weight:bold">-&gt;</span><span class="word">printf</span><span class="structure">(</span>                     <span class="comment" style="color:#060;font-style:italic"># not $arg-&gt;{file}</span>
      <span class="single" style="color:#909">'&lt;span style="color:%s"&gt;%s&lt;/span&gt;'</span><span class="operator" style="color:#000;font-weight:bold">,</span>
      <span class="symbol" style="color:#333;background-color:#fcc">$arg</span><span class="operator" style="color:#000;font-weight:bold">-&gt;</span><span class="word">colour</span><span class="operator" style="color:#000;font-weight:bold">,</span>                         <span class="comment" style="color:#060;font-style:italic"># not $arg-&gt;{colour}</span>
      <span class="symbol" style="color:#333;background-color:#fcc">$arg</span><span class="operator" style="color:#000;font-weight:bold">-&gt;</span><span class="word">text</span><span class="operator" style="color:#000;font-weight:bold">,</span>                           <span class="comment" style="color:#060;font-style:italic"># not $arg-&gt;{text}</span>
    <span class="structure">);</span>
  <span class="structure">}</span></pre>
		<p>This will add a slight performance hit to your code (but shouldn't signiciantly impact the speed of <code>$check</code>) but does look a little more elegant, and will give you somewhat helpful error messages (about there being no such method as <code>$arg-&gt;color</code>) if you mistype a parameter name.</p>
		<h2><span id="Shifting_off_$self">Shifting off <code>$self</code></span></h2>
		<p>Now imagine our function is intended to be called as a method. We probably want to shift <code>$self</code> off <code>@_</code> first. Just do this as normal:</p>
		<pre class="highlighting-perl">  <span class="keyword" style="color:#009;font-weight:bold">use</span> <span class="pragma" style="color:#009">feature</span> <span class="words" style="color:#333;background-color:#ffc">qw(state)</span><span class="structure">;</span>
  <span class="keyword" style="color:#009;font-weight:bold">use</span> <span class="word">Type::Params</span> <span class="float">1.004000</span> <span class="words" style="color:#333;background-color:#ffc">qw(compile_named)</span><span class="structure">;</span>
  <span class="keyword" style="color:#009;font-weight:bold">use</span> <span class="word">Types::Standard</span> <span class="words" style="color:#333;background-color:#ffc">qw(FileHandle HasMethods Str)</span><span class="structure">;</span>
  
  <span class="keyword" style="color:#009;font-weight:bold">sub</span> <span class="word">htmlprint</span> <span class="structure">{</span>
    <span class="word">state</span> <span class="symbol" style="color:#333;background-color:#fcc">$check</span> <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="word">compile_named</span><span class="structure">(</span>
      <span class="word">file</span>   <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="word">FileHandle</span> <span class="operator" style="color:#000;font-weight:bold">|</span> <span class="word">HasMethods</span><span class="structure">[</span><span class="single" style="color:#909">'printf'</span><span class="structure">]</span><span class="operator" style="color:#000;font-weight:bold">,</span>
      <span class="word">text</span>   <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="word">Str</span><span class="operator" style="color:#000;font-weight:bold">,</span>
      <span class="word">colour</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="word">Str</span><span class="operator" style="color:#000;font-weight:bold">,</span> <span class="structure">{</span> <span class="word">default</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="double" style="color:#909">"black"</span> <span class="structure">}</span><span class="operator" style="color:#000;font-weight:bold">,</span>
    <span class="structure">);</span>
    <span class="keyword" style="color:#009;font-weight:bold">my</span> <span class="symbol" style="color:#333;background-color:#fcc">$self</span> <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="core" style="color:#009;font-weight:bold">shift</span><span class="structure">;</span>
    <span class="keyword" style="color:#009;font-weight:bold">my</span> <span class="symbol" style="color:#333;background-color:#fcc">$arg</span>  <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="symbol" style="color:#333;background-color:#fcc">$check</span><span class="operator" style="color:#000;font-weight:bold">-&gt;</span><span class="structure">(</span><span class="magic" style="color:#900;font-weight:bold">@_</span><span class="structure">);</span>
    
    <span class="operator" style="color:#000;font-weight:bold">...</span><span class="structure">;</span>  <span class="comment" style="color:#060;font-style:italic"># rest of the function goes here</span>
  <span class="structure">}</span></pre>
		<p>It's sometimes useful to check <code>$self</code> is really a blessed object and not, say, the class name. (That is, check we've been called as an object method instead of a class method.)</p>
		<pre class="highlighting-perl">  <span class="keyword" style="color:#009;font-weight:bold">use</span> <span class="pragma" style="color:#009">feature</span> <span class="words" style="color:#333;background-color:#ffc">qw(state)</span><span class="structure">;</span>
  <span class="keyword" style="color:#009;font-weight:bold">use</span> <span class="word">Type::Params</span> <span class="float">1.004000</span> <span class="words" style="color:#333;background-color:#ffc">qw(compile_named)</span><span class="structure">;</span>
  <span class="keyword" style="color:#009;font-weight:bold">use</span> <span class="word">Types::Standard</span> <span class="words" style="color:#333;background-color:#ffc">qw(FileHandle HasMethods Str Object)</span><span class="structure">;</span>
  
  <span class="keyword" style="color:#009;font-weight:bold">sub</span> <span class="word">htmlprint</span> <span class="structure">{</span>
    <span class="word">state</span> <span class="symbol" style="color:#333;background-color:#fcc">$check</span> <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="word">compile_named</span><span class="structure">(</span>
      <span class="word">file</span>   <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="word">FileHandle</span> <span class="operator" style="color:#000;font-weight:bold">|</span> <span class="word">HasMethods</span><span class="structure">[</span><span class="single" style="color:#909">'printf'</span><span class="structure">]</span><span class="operator" style="color:#000;font-weight:bold">,</span>
      <span class="word">text</span>   <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="word">Str</span><span class="operator" style="color:#000;font-weight:bold">,</span>
      <span class="word">colour</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="word">Str</span><span class="operator" style="color:#000;font-weight:bold">,</span> <span class="structure">{</span> <span class="word">default</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="double" style="color:#909">"black"</span> <span class="structure">}</span><span class="operator" style="color:#000;font-weight:bold">,</span>
    <span class="structure">);</span>
    <span class="keyword" style="color:#009;font-weight:bold">my</span> <span class="symbol" style="color:#333;background-color:#fcc">$self</span> <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="word">Object</span><span class="operator" style="color:#000;font-weight:bold">-&gt;</span><span class="structure">(</span><span class="core" style="color:#009;font-weight:bold">shift</span><span class="structure">);</span>  <span class="comment" style="color:#060;font-style:italic"># will die if it's not an object</span>
    <span class="keyword" style="color:#009;font-weight:bold">my</span> <span class="symbol" style="color:#333;background-color:#fcc">$arg</span>  <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="symbol" style="color:#333;background-color:#fcc">$check</span><span class="operator" style="color:#000;font-weight:bold">-&gt;</span><span class="structure">(</span><span class="magic" style="color:#900;font-weight:bold">@_</span><span class="structure">);</span>
    
    <span class="operator" style="color:#000;font-weight:bold">...</span><span class="structure">;</span>  <span class="comment" style="color:#060;font-style:italic"># rest of the function goes here</span>
  <span class="structure">}</span></pre>
		<h2><span id="Positional_Parameters">Positional Parameters</span></h2>
		<p>For functions with three or more parameters, it usually makes sense to use named parameters (as above), but if you want to use positional parameters, use <code>compile</code> instead of <code>compile_named</code>:</p>
		<pre class="highlighting-perl">  <span class="keyword" style="color:#009;font-weight:bold">use</span> <span class="pragma" style="color:#009">feature</span> <span class="words" style="color:#333;background-color:#ffc">qw(state)</span><span class="structure">;</span>
  <span class="keyword" style="color:#009;font-weight:bold">use</span> <span class="word">Type::Params</span> <span class="float">1.004000</span> <span class="words" style="color:#333;background-color:#ffc">qw(compile)</span><span class="structure">;</span>
  <span class="keyword" style="color:#009;font-weight:bold">use</span> <span class="word">Types::Standard</span> <span class="words" style="color:#333;background-color:#ffc">qw(FileHandle HasMethods Str)</span><span class="structure">;</span>
  
  <span class="keyword" style="color:#009;font-weight:bold">sub</span> <span class="word">htmlprint</span> <span class="structure">{</span>
    <span class="word">state</span> <span class="symbol" style="color:#333;background-color:#fcc">$check</span> <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="word">compile</span><span class="structure">(</span>
      <span class="word">FileHandle</span> <span class="operator" style="color:#000;font-weight:bold">|</span> <span class="word">HasMethods</span><span class="structure">[</span><span class="single" style="color:#909">'printf'</span><span class="structure">]</span><span class="operator" style="color:#000;font-weight:bold">,</span>
      <span class="word">Str</span><span class="operator" style="color:#000;font-weight:bold">,</span>
      <span class="word">Str</span><span class="operator" style="color:#000;font-weight:bold">,</span> <span class="structure">{</span> <span class="word">default</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="double" style="color:#909">"black"</span> <span class="structure">}</span><span class="operator" style="color:#000;font-weight:bold">,</span>
    <span class="structure">);</span>
    <span class="keyword" style="color:#009;font-weight:bold">my</span> <span class="structure">(</span><span class="symbol" style="color:#333;background-color:#fcc">$file</span><span class="operator" style="color:#000;font-weight:bold">,</span> <span class="symbol" style="color:#333;background-color:#fcc">$text</span><span class="operator" style="color:#000;font-weight:bold">,</span> <span class="symbol" style="color:#333;background-color:#fcc">$colour</span><span class="structure">)</span> <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="symbol" style="color:#333;background-color:#fcc">$check</span><span class="operator" style="color:#000;font-weight:bold">-&gt;</span><span class="structure">(</span><span class="magic" style="color:#900;font-weight:bold">@_</span><span class="structure">);</span>
    
    <span class="operator" style="color:#000;font-weight:bold">...</span><span class="structure">;</span>  <span class="comment" style="color:#060;font-style:italic"># rest of the function goes here</span>
  <span class="structure">}</span>
  
  <span class="word">htmlprint</span><span class="structure">(</span><span class="symbol" style="color:#333;background-color:#fcc">$fh</span><span class="operator" style="color:#000;font-weight:bold">,</span> <span class="double" style="color:#909">"Hello world"</span><span class="operator" style="color:#000;font-weight:bold">,</span> <span class="double" style="color:#909">"red"</span><span class="structure">);</span>
  <span class="word">htmlprint</span><span class="structure">(</span><span class="symbol" style="color:#333;background-color:#fcc">$fh</span><span class="operator" style="color:#000;font-weight:bold">,</span> <span class="double" style="color:#909">"Hello world"</span><span class="structure">);</span>   <span class="comment" style="color:#060;font-style:italic"># defaults to black</span></pre>
		<h2><span id="Coercions">Coercions</span></h2>
		<p>One of the most powerful features of <a class="podlinkpod" href="https://metacpan.org/pod/Moose">Moose</a> type constraints is type coercions. This allows you to automatically convert between types when a type check would otherwise fail. Let's define a coercion from a string filename to a filehandle:</p>
		<pre class="highlighting-perl">  <span class="keyword" style="color:#009;font-weight:bold">package</span> <span class="word">My::Types</span> <span class="structure">{</span>
    <span class="keyword" style="color:#009;font-weight:bold">use</span> <span class="word">Type::Library</span> <span class="word">-base</span><span class="structure">;</span>
    <span class="keyword" style="color:#009;font-weight:bold">use</span> <span class="word">Type::Utils</span> <span class="word">-all</span><span class="structure">;</span>
    <span class="keyword" style="color:#009;font-weight:bold">use</span> <span class="word">Types::Standard</span> <span class="structure">();</span>
    
    <span class="word">declare</span> <span class="double" style="color:#909">"FileHandle"</span><span class="operator" style="color:#000;font-weight:bold">,</span>
      <span class="word">as</span> <span class="word">Types::Standard::FileHandle</span><span class="structure">;</span>
    
    <span class="word">coerce</span> <span class="double" style="color:#909">"FileHandle"</span><span class="operator" style="color:#000;font-weight:bold">,</span>
      <span class="word">from</span> <span class="word">Types::Standard::Str</span><span class="operator" style="color:#000;font-weight:bold">,</span> <span class="word">via</span> <span class="structure">{</span>
        <span class="word">open</span><span class="structure">(</span><span class="keyword" style="color:#009;font-weight:bold">my</span> <span class="symbol" style="color:#333;background-color:#fcc">$fh</span><span class="operator" style="color:#000;font-weight:bold">,</span> <span class="double" style="color:#909">"&lt;"</span><span class="operator" style="color:#000;font-weight:bold">,</span> <span class="magic" style="color:#900;font-weight:bold">$_</span><span class="structure">)</span> <span class="operator" style="color:#000;font-weight:bold">or</span> <span class="word">die</span><span class="structure">(</span><span class="double" style="color:#909">"Could not open $_: $!"</span><span class="structure">);</span>
        <span class="keyword" style="color:#009;font-weight:bold">return</span> <span class="symbol" style="color:#333;background-color:#fcc">$fh</span><span class="structure">;</span>
      <span class="structure">};</span>
  <span class="structure">}</span></pre>
		<p>Now we can use our custom <code>FileHandle</code> type:</p>
		<pre class="highlighting-perl">  <span class="keyword" style="color:#009;font-weight:bold">use</span> <span class="pragma" style="color:#009">feature</span> <span class="words" style="color:#333;background-color:#ffc">qw(state)</span><span class="structure">;</span>
  <span class="keyword" style="color:#009;font-weight:bold">use</span> <span class="word">Type::Params</span> <span class="float">1.004000</span> <span class="words" style="color:#333;background-color:#ffc">qw(compile_named)</span><span class="structure">;</span>
  <span class="keyword" style="color:#009;font-weight:bold">use</span> <span class="word">Types::Standard</span> <span class="words" style="color:#333;background-color:#ffc">qw(HasMethods Str)</span><span class="structure">;</span>
  <span class="keyword" style="color:#009;font-weight:bold">use</span> <span class="word">My::Types</span> <span class="words" style="color:#333;background-color:#ffc">qw(FileHandle)</span><span class="structure">;</span>
  
  <span class="keyword" style="color:#009;font-weight:bold">sub</span> <span class="word">htmlprint</span> <span class="structure">{</span>
    <span class="word">state</span> <span class="symbol" style="color:#333;background-color:#fcc">$check</span> <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="word">compile_named</span><span class="structure">(</span>
      <span class="word">file</span>   <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="word">FileHandle</span> <span class="operator" style="color:#000;font-weight:bold">|</span> <span class="word">HasMethods</span><span class="structure">[</span><span class="single" style="color:#909">'printf'</span><span class="structure">]</span><span class="operator" style="color:#000;font-weight:bold">,</span>
      <span class="word">text</span>   <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="word">Str</span><span class="operator" style="color:#000;font-weight:bold">,</span>
      <span class="word">colour</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="word">Str</span><span class="operator" style="color:#000;font-weight:bold">,</span> <span class="structure">{</span> <span class="word">default</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="double" style="color:#909">"black"</span> <span class="structure">}</span><span class="operator" style="color:#000;font-weight:bold">,</span>
    <span class="structure">);</span>
    <span class="keyword" style="color:#009;font-weight:bold">my</span> <span class="symbol" style="color:#333;background-color:#fcc">$arg</span> <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="symbol" style="color:#333;background-color:#fcc">$check</span><span class="operator" style="color:#000;font-weight:bold">-&gt;</span><span class="structure">(</span><span class="magic" style="color:#900;font-weight:bold">@_</span><span class="structure">);</span>
    
    <span class="operator" style="color:#000;font-weight:bold">...</span><span class="structure">;</span>  <span class="comment" style="color:#060;font-style:italic"># rest of the function goes here</span>
  <span class="structure">}</span></pre>
		<p>Now this will work:</p>
		<pre class="highlighting-perl">  <span class="word">htmlprint</span><span class="structure">(</span>
    <span class="word">file</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="double" style="color:#909">"/tmp/out.html"</span><span class="operator" style="color:#000;font-weight:bold">,</span>  <span class="comment" style="color:#060;font-style:italic"># will be coerced to a filehandle</span>
    <span class="word">text</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="double" style="color:#909">"Hello world"</span><span class="operator" style="color:#000;font-weight:bold">,</span>
  <span class="structure">);</span></pre>
		<p>You don't need to say <code>coerce =&gt; 1</code> anywhere. Coercions happen by default. If you wish to disable coercions, you can use Type::Tiny's handy <code>no_coercions</code> method:</p>
		<pre class="highlighting-perl">  <span class="keyword" style="color:#009;font-weight:bold">use</span> <span class="pragma" style="color:#009">feature</span> <span class="words" style="color:#333;background-color:#ffc">qw(state)</span><span class="structure">;</span>
  <span class="keyword" style="color:#009;font-weight:bold">use</span> <span class="word">Type::Params</span> <span class="float">1.004000</span> <span class="words" style="color:#333;background-color:#ffc">qw(compile_named)</span><span class="structure">;</span>
  <span class="keyword" style="color:#009;font-weight:bold">use</span> <span class="word">Types::Standard</span> <span class="words" style="color:#333;background-color:#ffc">qw(HasMethods Str)</span><span class="structure">;</span>
  <span class="keyword" style="color:#009;font-weight:bold">use</span> <span class="word">My::Types</span> <span class="words" style="color:#333;background-color:#ffc">qw(FileHandle)</span><span class="structure">;</span>
  
  <span class="keyword" style="color:#009;font-weight:bold">sub</span> <span class="word">htmlprint</span> <span class="structure">{</span>
    <span class="word">state</span> <span class="symbol" style="color:#333;background-color:#fcc">$check</span> <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="word">compile_named</span><span class="structure">(</span>
      <span class="word">file</span>   <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="word">FileHandle</span><span class="operator" style="color:#000;font-weight:bold">-&gt;</span><span class="word">no_coercions</span> <span class="operator" style="color:#000;font-weight:bold">|</span> <span class="word">HasMethods</span><span class="structure">[</span><span class="single" style="color:#909">'printf'</span><span class="structure">]</span><span class="operator" style="color:#000;font-weight:bold">,</span>
      <span class="word">text</span>   <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="word">Str</span><span class="operator" style="color:#000;font-weight:bold">,</span>
      <span class="word">colour</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="word">Str</span><span class="operator" style="color:#000;font-weight:bold">,</span> <span class="structure">{</span> <span class="word">default</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="double" style="color:#909">"black"</span> <span class="structure">}</span><span class="operator" style="color:#000;font-weight:bold">,</span>
    <span class="structure">);</span>
    <span class="keyword" style="color:#009;font-weight:bold">my</span> <span class="symbol" style="color:#333;background-color:#fcc">$arg</span> <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="symbol" style="color:#333;background-color:#fcc">$check</span><span class="operator" style="color:#000;font-weight:bold">-&gt;</span><span class="structure">(</span><span class="magic" style="color:#900;font-weight:bold">@_</span><span class="structure">);</span>
    
    <span class="operator" style="color:#000;font-weight:bold">...</span><span class="structure">;</span>  <span class="comment" style="color:#060;font-style:italic"># rest of the function goes here</span>
  <span class="structure">}</span></pre>
		<p>The <code>no_coercions</code> method disables coercions for just that usage of the type constraint. (It does so by transparently creating a child type constraint without any coercions.)</p>
		<h2><span id="Performance">Performance</span></h2>
		<p>All this does come at a performance cost, particularly for the first time a sub is called and <code>$check</code> needs to be compiled. But for a frequently called sub, Type::Params will perform favourably compared to most other solutions.</p>
		<p>According to my own benchmarking (though if you want to be sure, do your own benchmarking which will better cover your own use cases), Type::Params performs a smidgen faster than <a class="podlinkpod" href="https://metacpan.org/pod/Params%3A%3AValidationCompiler">Params::ValidationCompiler</a>, about five times faster than <a class="podlinkpod" href="https://metacpan.org/pod/Params%3A%3AValidate">Params::Validate</a>, about ten times faster than <a class="podlinkpod" href="https://metacpan.org/pod/Data%3A%3AValidator">Data::Validator</a>, and about twenty times faster than <a class="podlinkpod" href="https://metacpan.org/pod/MooseX%3A%3AParams%3A%3AValidate">MooseX::Params::Validate</a>.</p>
		<p>Short of writing your own checking code inline (and remember how long and ugly that started to look!), you're unlikely to find a faster way to check parameters for a frequently used sub.</p>
		<p>Many of Type::Tiny's built in type checks can be accellerated by installing <a class="podlinkpod" href="https://metacpan.org/pod/Type%3A%3ATiny%3A%3AXS">Type::Tiny::XS</a> and/or <a class="podlinkpod" href="https://metacpan.org/pod/Ref%3A%3AUtil%3A%3AXS">Ref::Util::XS</a>.</p>
		<p>One very minor performance improvement... this:</p>
		<pre class="highlighting-perl">  <span class="keyword" style="color:#009;font-weight:bold">my</span> <span class="symbol" style="color:#333;background-color:#fcc">$arg</span> <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="symbol" style="color:#333;background-color:#fcc">$check</span><span class="operator" style="color:#000;font-weight:bold">-&gt;</span><span class="structure">(</span><span class="magic" style="color:#900;font-weight:bold">@_</span><span class="structure">);</span></pre>
		<p>... will run very slightly faster if you write it like this:</p>
		<pre class="highlighting-perl">  <span class="keyword" style="color:#009;font-weight:bold">my</span> <span class="symbol" style="color:#333;background-color:#fcc">$arg</span> <span class="operator" style="color:#000;font-weight:bold">=</span> <span class="cast" style="color:#f00;font-weight:bold">&amp;</span><span class="structure">{</span><span class="symbol" style="color:#333;background-color:#fcc">$check</span><span class="structure">};</span></pre>
		<p>It's a fairly Perl-4-ish way of calling subs, but it's more efficient as Perl avoids creating a new <code>@_</code> array for the called function and simply passes it the caller's <code>@_</code> as-is.</p>
]]>
    </content>
</entry>
