<?xml version="1.0" encoding="UTF-8"?>
<entry xmlns="http://www.w3.org/2005/Atom">
<title>Planet Moose - August 2014</title>
<link rel="alternate" type="text/html" href="http://blogs.perl.org/users/toby_inkster/2014/09/planet-moose---august-2014.html" />
<id>tag:blogs.perl.org,2014:/users/toby_inkster//1019.6360</id>
<published>2014-09-02T01:26:00</published>
<updated>2014-09-02T01:26:00</updated>
<summary>Welcome to Planet Moose, a brief write up on what&#x26;apos;s been happening in the world of Moose in the past month, for the benefit of those of you who don&#x26;apos;t have their eyes permanently glued to the #moose IRC channel,...</summary>
<category term="Class-Tiny" scheme="http://www.sixapart.com/ns/types#category" />
<category term="Moo" scheme="http://www.sixapart.com/ns/types#category" />
<category term="Moose" scheme="http://www.sixapart.com/ns/types#category" />
<category term="Type-Tiny" scheme="http://www.sixapart.com/ns/types#category" />
<content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/toby_inkster/"><![CDATA[
                            <div><img src="http://buzzword.org.uk/2013/Planet_Moose.png" alt="" style="float:left; margin: 0 1em 0.33em 0"/><p>Welcome to Planet Moose, a brief write up on what's been happening in the world of <a href="https://metacpan.org/pod/Moose" class="podlinkpod">Moose</a> in the past month, for the benefit of those of you who don't have their eyes permanently glued to the <i>#moose</i> IRC channel, or the MetaCPAN recent uploads page.</p>
		<p>It's now a year since <a class="podlinkurl" href="http://blogs.perl.org/users/toby_inkster/2013/09/-welcome-to-the-first.html">the first Planet Moose</a>. I'm surprised I've managed to keep it up for a whole twelve months. (Though it's <a href="http://blogs.perl.org/users/toby_inkster/2014/05/planet-moose---april-2014.html" class="podlinkurl">not always been posted promptly on the first day of the month</a>!)</p>
		<p>If you'd like to contribute some news for next month's issue, you can do so on <a href="https://github.com/tobyink/p5-planet-moose/wiki" class="podlinkurl">the wiki</a>.</p>
		<h2><span id="Moose">Moose</span></h2>
		<p><a class="podlinkpod" href="https://metacpan.org/pod/Moose">Moose</a> 2.1211 has been released containing some documentation updates and minor changes to <a href="https://metacpan.org/pod/Moose%3A%3AExporter" class="podlinkpod">Moose::Exporter</a>.</p>
		<p>More interestingly, three Moose 2.13xx trial releases have been uploaded to CPAN. The major new feature so far is improved support for overloaded operators, especially in roles, eliminating the need for <a class="podlinkpod" href="https://metacpan.org/pod/MooseX%3A%3ARole%3A%3AWithOverloading">MooseX::Role::WithOverloading</a>.</p></div>
                            		<h2><span id="Moo">Moo</span></h2>
		<p><a class="podlinkpod" href="https://metacpan.org/pod/Moo">Moo</a> 1.006000 has been released. This has slightly improved performance for type constraint checks, and adds support for <code class="prettyprint">coerce =&gt; 1</code> in attribute declarations, provided you are using a type constraint framework that exposes an appropriate coercion API. (<a href="https://metacpan.org/pod/Type%3A%3ATiny" class="podlinkpod">Type::Tiny</a> does.)</p>
		<h2><span id="OO_Jenga">OO Jenga</span></h2>
		<p>For some time there have been discussions on IRC about the problems of OO Jenga. For example, what happens when a <a class="podlinkpod" href="https://metacpan.org/pod/Moose">Moose</a> class subclasses a <a class="podlinkpod" href="https://metacpan.org/pod/Moo">Moo</a> class that subclasses a <a href="https://metacpan.org/pod/Class%3A%3ATiny" class="podlinkpod">Class::Tiny</a> class? Does it all work smoothly?</p>
		<p>The major problem that tends to occur in this sort of situation is with <code class="prettyprint">BUILD</code> methods being called too early, or sometimes multiple times. Let's consider the case of a <b>Unicorn</b> class which subclasses <b>Horse</b>. <b>Horse</b> is built with Class::Tiny, and <b>Unicorn</b> with, say, Moose. So when you do:</p>
		<pre class="highlighting-perl">    <span class="word">Unicorn</span><span style="color:#000;font-weight:bold" class="operator">-&gt;</span><span class="word">new</span><span class="structure">(</span><span class="word">name</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span style="color:#909" class="double">"Twilight Sparkle"</span><span class="operator" style="color:#000;font-weight:bold">,</span> <span class="word">horn</span> <span style="color:#000;font-weight:bold" class="operator">=&gt;</span> <span class="double" style="color:#909">"medium"</span><span class="operator" style="color:#000;font-weight:bold">,</span> <span class="word">colour</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="double" style="color:#909">"mulberry"</span><span class="structure">);</span></pre>
		<p>then the first thing the <b>Unicorn</b> will do will be to call the parent constructor using something like:</p>
		<pre class="highlighting-perl">    <span style="color:#333;background-color:#fcc" class="symbol">$class</span><span class="operator" style="color:#000;font-weight:bold">-&gt;</span><span class="word">SUPER::new</span><span class="structure">(</span> <span class="cast" style="color:#f00;font-weight:bold">\</span><span class="symbol" style="color:#333;background-color:#fcc">%params</span> <span class="structure">);</span></pre>
		<p>So now, <code class="prettyprint">Horse::new</code> gets called to handle the parameters it knows about (<code class="prettyprint">name</code> and <code class="prettyprint">colour</code>). <code class="prettyprint">Horse::new</code> is the constructor supplied by Class::Tiny. Once it's finished handling the parameters, what it will do is call a <code class="prettyprint">BUILD</code> sub in every level of <code class="prettyprint">$class</code>'s inheritance hierarchy, starting at the bottom (i.e. just above <b>UNIVERSAL</b>). Once it's done that, then it returns <code class="prettyprint">$self</code>. This is where it gets interesting...</p>
		<p><code class="prettyprint">Unicorn::new</code> comes back into play. It handles the <code class="prettyprint">horn</code> parameter. Now that all the parameters have been handled, <i>it</i> now also calls the <code class="prettyprint">BUILD</code> sub in every level in <code class="prettyprint">$class</code>'s inheritance hierarchy!</p>
		<p>So all the <code class="prettyprint">BUILD</code> subs have been called twice. <b>Horse</b> wasn't aware that <b>Unicorn</b> was planning on calling them, and <b>Unicorn</b> wasn't aware that <b>Horse</b> had already called them. Whatsmore, the first time they were called, the <code class="prettyprint">horn</code> parameter hadn't been properly handled yet! Yowch!!</p>
		<p>What can be done? Can't <code class="prettyprint">Horse::new</code> notice that it's been called by <code class="prettyprint">Unicorn::new</code> (a child class constructor) and thus avoid calling <code class="prettyprint">BUILD</code>? No, that doesn't quite work. The problem is that <code class="prettyprint">Unicorn::new</code> might need not call <code class="prettyprint">Horse::new</code> just once! Perhaps the <b>Unicorn</b> class definition includes something like:</p>
		<pre class="highlighting-perl">     <span class="word">has</span> <span class="word">friends</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="structure">(</span>
        <span class="word">is</span>      <span style="color:#000;font-weight:bold" class="operator">=&gt;</span> <span class="double" style="color:#909">"ro"</span><span style="color:#000;font-weight:bold" class="operator">,</span>
        <span class="word">isa</span>     <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="word">ArrayRef</span><span class="structure">[</span> <span class="word">InstanceOf</span><span class="structure">[</span><span class="double" style="color:#909">"Horse"</span><span class="structure">]</span> <span class="structure">]</span><span style="color:#000;font-weight:bold" class="operator">,</span>
        <span class="word">default</span> <span style="color:#000;font-weight:bold" class="operator">=&gt;</span> <span style="color:#009;font-weight:bold" class="keyword">sub</span> <span class="structure">{</span> <span class="structure">[</span> <span class="word">Horse</span><span class="operator" style="color:#000;font-weight:bold">-&gt;</span><span class="word">new</span><span class="structure">(</span><span class="word">name</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span style="color:#909" class="double">"Pinkamena Pie"</span><span class="structure">)</span> <span class="structure">]</span> <span class="structure">}</span><span class="operator" style="color:#000;font-weight:bold">,</span>
     <span class="structure">);</span></pre>
		<p>So a typical call of the <b>Unicorn</b> constructor might end up calling the <b>Horse</b> constructor once because <b>Horse</b> is the parent class of <b>Unicorn</b>, and again when it builds the default value for <code class="prettyprint">friends</code>.</p>
		<p>There isn't really any neat solution to this. When calling the parent constructor, <b>Unicorn</b> really just needs to tell <b>Horse</b> on <i>this particular method call, please don't call <code class="prettyprint">BUILD</code></i>. But how should <b>Unicorn</b> indicate this request? The solution that the developers of Moose, Moo, and Class::Tiny have settled on is to accept a parameter called <code class="prettyprint">__no_BUILD__</code> that tells the constructor not to call <code class="prettyprint">BUILD</code> methods.</p>
		<p>So:</p>
		<pre class="highlighting-perl">    <span class="word">SomeClass</span><span style="color:#000;font-weight:bold" class="operator">-&gt;</span><span class="word">new</span><span class="structure">(</span> <span class="word">foo</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span class="number" style="color:#39C">1</span><span style="color:#000;font-weight:bold" class="operator">,</span> <span class="word">bar</span> <span class="operator" style="color:#000;font-weight:bold">=&gt;</span> <span style="color:#39C" class="number">2</span><span class="operator" style="color:#000;font-weight:bold">,</span> <span class="word">__no_BUILD__</span> <span style="color:#000;font-weight:bold" class="operator">=&gt;</span> <span style="color:#39C" class="number">1</span> <span class="structure">);</span></pre>
		<p>will perform the normal <b>SomeClass</b> construction, but <i>prevent <code class="prettyprint">BUILD</code> from getting called</i>. It is <i>not</i> intended that you should ever supply this parameter yourself in normal code - it's merely a way for the various OO frameworks to co-operate with each other.</p>
		<p>Expect to see this feature rolled out in Moose, Moo, and Class::Tiny over the next few months.</p>
		<h2><span id="In_other_news...">In other news...</span></h2>
		<ul>
			<li>Dave Rolsky has published the <a href="https://github.com/moose/intro-to-moose" class="podlinkurl">slides from his Introduction to Moose class</a>. It's been <a href="https://news.ycombinator.com/item?id=8126690" class="podlinkurl">discussed on Hacker News</a>.</li>
			<li>I released <a class="podlinkpod" href="https://metacpan.org/pod/Type%3A%3ATiny">Type::Tiny</a> 1.000000. <a href="http://blogs.perl.org/users/toby_inkster/2014/08/typetiny-1000000-released.html" class="podlinkurl">I</a> <a class="podlinkurl" href="http://blogs.perl.org/users/toby_inkster/2014/08/typetiny-tricks-1-quick-intersections.html">blogged</a> <a class="podlinkurl" href="http://blogs.perl.org/users/toby_inkster/2014/08/typetiny-tricks-2-types-are-objects.html">about</a> <a href="http://blogs.perl.org/users/toby_inkster/2014/08/typetiny-tricks-3-one-off-coercions.html" class="podlinkurl">it</a> <a class="podlinkurl" href="http://blogs.perl.org/users/toby_inkster/2014/08/typetiny-tricks-4-inlined-type-constraints.html">a</a> <a href="http://blogs.perl.org/users/toby_inkster/2014/08/typetiny-tricks-5-wrapping-moosemouse-type-constraints.html" class="podlinkurl">teeny</a> <a href="http://blogs.perl.org/users/toby_inkster/2014/08/typetiny-tricks-6-tricks-with-tuples.html" class="podlinkurl">tiny</a> <a class="podlinkurl" href="http://blogs.perl.org/users/toby_inkster/2014/08/typetiny-tricks-7-tricks-with-dicts.html">bit</a>.</li>
			<li>Minor updates to <a href="https://metacpan.org/pod/MooseX%3A%3ARole%3A%3AParameterized" class="podlinkpod">MooseX::Role::Parameterized</a>, <a class="podlinkpod" href="https://metacpan.org/pod/MooseX%3A%3AStorage">MooseX::Storage</a>, <a href="https://metacpan.org/pod/MooseX%3A%3ADeclare" class="podlinkpod">MooseX::Declare</a>, and <a class="podlinkpod" href="https://metacpan.org/pod/MooseX%3A%3AGetopt">MooseX::Getopt</a>.</li>
			<li>Minor update to <a href="https://metacpan.org/pod/Class%3A%3AMethod%3A%3AModifiers" class="podlinkpod">Class::Method::Modifiers</a>, a module used by Moo.</li>
			<li>An <a href="http://www.cbc.ca/news/world/loose-moose-gets-stuck-in-siemens-office-in-dresden-1.2746161" class="podlinkurl">interesting article</a> about German industrial giant Siemens' experiences with Moose at their office in Dresden.</li>
		</ul>
                        ]]></content>
</entry>
