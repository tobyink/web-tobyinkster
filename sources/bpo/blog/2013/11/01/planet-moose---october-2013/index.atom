<?xml version="1.0" encoding="utf-8"?>
<entry xmlns="http://www.w3.org/2005/Atom">
    <title>Planet Moose - October 2013</title>
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/toby_inkster/2013/11/planet-moose---october-2013.html"/>
    <id>tag:blogs.perl.org,2013:/users/toby_inkster//1019.5307</id>

    <published>2013-11-01T08:53:32Z</published>
    <updated>2013-11-01T09:00:14Z</updated>

    <summary> Welcome to Planet Moose, a brief write up on what's been happening in the world of Moose in the past month, for the benefit of those of you who don't have their eyes permanently glued to the #moose IRC...</summary>
    <author>
        <name>Toby Inkster</name>
        <uri>http://tobyinkster.co.uk/</uri>
    </author>
    
    <category term="mo" label="Mo" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="moose" label="Moose" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="p5mop" label="p5-mop" scheme="http://www.sixapart.com/ns/types#tag"/>
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/toby_inkster/">
        <![CDATA[		<p><img src="http://buzzword.org.uk/2013/Planet_Moose.png" alt="" style="float:left; margin: 0 1em 0.33em 0">Welcome to Planet Moose, a brief write up on what's been happening in the world of <a class="podlinkpod" href="https://metacpan.org/module/Moose">Moose</a> in the past month, for the benefit of those of you who don't have their eyes permanently glued to the <i>#moose</i> IRC channel, or the MetaCPAN recent uploads page.</p>
		<p>Thanks for contributions from Damien Krotkine; and thanks to Upasana Shukla for allowing me to interview her. If you'd like to contribute some news for next month's issue, you can do so on <a class="podlinkurl" href="https://github.com/tobyink/p5-planet-moose/wiki">the wiki</a>.</p>
		<div><h2><span id="Moose">Moose</span></h2>
		<p>The big news is that <a class="podlinkurl" href="http://blogs.perl.org/users/upasana/2013/10/yay-moose-is-free-from-stringy-exceptions.html">Moose now throws blessed exception objects</a>. The 2.1102 trial version is the first release with this feature. (I think <a class="podlinkpod" href="https://metacpan.org/module/MooseX%3A%3AException%3A%3ARot13">MooseX::Exception::Rot13</a> is the first distribution to include a dependency on Moose::Exception.)<br style="clear:left"></p></div>]]>
        <![CDATA[		<p>This means that catching Moose errors (with <a class="podlinkpod" href="https://metacpan.org/module/Try%3A%3ATiny">Try::Tiny</a> for example) and dealing with them no longer requires parsing the error with regexps to figure out what error you've gotten. Instead you can simply check the exception's <code>isa</code> method. Once the bulk of Moose-dependent modules are doing that, then the Moose developers will have more freedom to change and improve the error messages emitted by Moose with less fear of breaking people's code that is relying on certain phrases appearing in regexps.</p>
		<h3><span id="Interview_with_Upasana_Shukla">Interview with Upasana Shukla</span></h3>
		<p>Upasana Shukla who implemented the Moose exception objects as part of her <a class="podlinkurl" href="http://gnome.org/opw/">OPW</a> internship kindly agreed to answer a few of my questions. (What follows is edited slightly for brevity. The <a class="podlinkurl" href="https://github.com/tobyink/p5-planet-moose/wiki/Oct-2013----interview">original unedited transcript</a> is on the wiki.)</p>
		<p><b><i>Out of all the OPW projects, what attracted you to the Perl one?</i></b></p>
		<p>It's a long story :D.</p>
		<p>I started learning Perl in January, 2012 and using it since then for solving Project Euler problems and other programming related tasks.</p>
		<p>When I got to know about OPW, without giving even a single thought, I decided to contribute to MetaCPAN, forked &amp; cloned its git repository. I told about this to my brother, he suggested me not to do it because MetaCPAN is a heavy project &amp; it won't work well on my laptop. So, I dropped my plan of contributing to MetaCPAN.</p>
		<p>Dancer was the other OPW project, but I didn't think of doing it. I checked out <a class="podlinkurl" href="http://upasana.me/2013/05/18/meta-cpan-debian-wikimedia-twisted-dancer-moose/">some other projects also</a>, most of them were Perl projects (but not sponsored by The Perl Foundation).</p>
		<p>I decided to contribute to Twisted (an event-driven network engine written in Python) &amp; dropped all of my plans to contribute to any Perl project. After application submission (on 3rd May), Marina Zhurakhinskaya told me that Perl projects have got only one applicant :( (sadly, it's true :(). Due to my Perl background, she suggested me to try for a Perl project, if I'm interested, because Twisted got so many applicants.</p>
		<p>I sent a mail to Sawyer (Dancer's mentor), but he was unavailable due to weekend. I got to know about Dancer2, which pointed me to Alexis Sukrieh's blog. There I saw that Dancer2 uses Modern Perl concepts. I heard about Modern Perl before, but never tried to explore it. Then, while trolling on the Perl foundation's OPW page, I noticed that there is one more project named Moose (I overlooked it in the first time). I just read a bit about Moose and saw that it's also about Modern Perl. Seeing this similarity between Dancer2 &amp; Moose, I decided to learn Modern Perl. I conversed with Moose' mentor (Shawn) and told him the whole story about how I came to know about Moose &amp; I'll contribute to Moose if &amp; only if I'll find it more interesting than Dancer.</p>
		<p>I went through chapter 7 of the Modern Perl book on Shawn's suggestion &amp; found it quite interesting. Before that I only knew about horrible way of doing OOP in Perl &amp; Moose made it so easy. By that time, Sawyer also replied to me, I told him that I came to know about Moose via Dancer2 and I'm thinking of contributing to Moose.</p>
		<p>This is what Sawyer said (how kind &amp; honest, he is!):</p>
		<pre class="highlighting-perl">    <span class="operator" style="color:#000;font-weight:bold">&lt;</span><span class="word">sawyer_</span><span class="operator" style="color:#000;font-weight:bold">&gt;</span> <span class="word">you</span> <span class="word">can't</span> <span class="word">lose</span> <span class="word">with</span> <span class="word">Shawn</span> <span class="operator" style="color:#000;font-weight:bold">and</span> <span class="word">Moose</span><span class="operator" style="color:#000;font-weight:bold">,</span> <span class="word">i</span> <span class="word">assure</span> <span class="label">you :</span><span class="structure">)</span>
    <span class="operator" style="color:#000;font-weight:bold">&lt;</span><span class="word">sawyer_</span><span class="operator" style="color:#000;font-weight:bold">&gt;</span> <span class="operator" style="color:#000;font-weight:bold">and</span> <span class="word">Moose</span> <span class="word">is</span> <span class="word">basically</span> <span class="word">used</span> <span class="word">by</span> <span class="word">a</span> <span class="word">large</span> <span class="word">portion</span> <span class="word">of</span> <span class="word">Modern</span> <span class="word">Perl</span>
    <span class="word">code</span><span class="operator" style="color:#000;font-weight:bold">,</span> <span class="word">so</span> <span class="word">you'll</span> <span class="word">be</span> <span class="word">making</span> <span class="word">a</span> <span class="word">substantial</span> <span class="word">contribution</span> <span class="word">to</span> <span class="word">the</span> <span class="word">community</span></pre>
		<p>Thanks to Sawyer! I decided to contribute to Moose.</p>
		<p><b><i>What change would you make to Moose if backwards compatibility were not an issue.</i></b></p>
		<p>I'd like to change some metaclass compatibility code (if I'd have given enough time &amp; Jesse's mentorship B-) ). There're around 5-6 exceptions from that part which annoyed me most. For example, this exception, CannotFixMetaclassCompatibility is being thrown at four different places, Jesse showed me similar code in p5-mop, which handled it at one place &amp; in a less complex way, so I'd like to see that thing in Moose also. That metaclass compatibility thing is a big scary monster :(.</p>
		<p>Also, this exception : "Can only clone an instance" annoyed me, it's related to bootstrapping process. I'd like to change it too (again time &amp; mentor are the primary requirements :D). So that if in future, some other OPW/GSoC intern will work on Moose, he/she won't need to fight with these monsters.</p>
		<p><b><i>Now that your internship is over, do you plan on continuing to contribute to Moose and/or other Perl projects?</i></b></p>
		<p>Yes, I'll keep on contributing to Moose (though just taking a month's break from contributing to Moose).</p>
		<p>Yes, I've plan of contributing to other Perl projects. I've already started with Dancer, but I made a mistake. I started with a tough issue (related to session in Dancer2). Since, I'm quite new to Dancer, so it would have been better if I would have started with an easier issue.</p>
		<p>Also, I talked to rjbs about working on some Dist::Zilla issues, so will definitely try them.</p>
		<p>Other projects about which I checked in past few days are p5-mop (quite similar to Moose), Moe (didn't understand anything) &amp; some work related to packaging Perl modules in Ubuntu/Debian (I'm planning to learn packaging perl modules). Apart from Perl, I'd love to work on other languages also, primarily C.</p>
		<h2><span id="p5-mop">p5-mop</span></h2>
		<p>Work has been pressing on to move as much of the syntax handling into XS to avoid <a class="podlinkurl" href="https://metacpan.org/pod/Parse::Keyword#DO-NOT-USE">issues</a> with <a class="podlinkpod" href="https://metacpan.org/module/Parse%3A%3AKeyword">Parse::Keyword</a>. In the course of these changes, all mop's non-core dependencies have been eliminated with the exception of <a class="podlinkpod" href="https://metacpan.org/module/Devel%3A%3ACallParser">Devel::CallParser</a>, which the mop developers hope might be added to the Perl core.</p>
		<p>Yuki Kimoto <a class="podlinkurl" href="http://blogs.perl.org/users/yuki_kimoto/2013/10/the-proposal-of-separating-method-keyword-from-mop.html">proposed</a> to seperate the <code>method</code> keyword implementation from the rest of the mop. There are already modules that provide this feature: <a class="podlinkpod" href="https://metacpan.org/module/Function%3A%3AParameters">Function::Parameters</a>, <a class="podlinkpod" href="https://metacpan.org/module/Method%3A%3ASignatures">Method::Signatures</a>, and the new <a class="podlinkpod" href="https://metacpan.org/module/Kavorka">Kavorka</a>. Stevan Little however shared his concerns about keeping <code>method</code> outside of the mop.</p>
		<h2><span id="In_other_news...">In other news...</span></h2>
		<ul>
			<li>I'd almost forgotten about <a class="podlinkpod" href="https://metacpan.org/module/Mo">Mo</a>, an OO framework somewhat smaller than <a class="podlinkpod" href="https://metacpan.org/module/Moo">Moo</a> but bigger than <a class="podlinkpod" href="https://metacpan.org/module/Class%3A%3ATiny">Class::Tiny</a>. But it's seen a few new releases this month.</li>
			<li>A few modules for creating private/semi-private attributes in Moo/Moose: <a class="podlinkpod" href="https://metacpan.org/module/MooX%3A%3APrivateAttributes">MooX::PrivateAttributes</a>, <a class="podlinkpod" href="https://metacpan.org/module/MooX%3A%3AProtectedAttributes">MooX::ProtectedAttributes</a>, and <a class="podlinkpod" href="https://metacpan.org/module/Lexical%3A%3AAccessor">Lexical::Accessor</a>.</li>
			<li>A new <a class="podlinkpod" href="https://metacpan.org/module/Type%3A%3ATiny">Type::Tiny</a> has been released, which splits out <a class="podlinkpod" href="https://metacpan.org/module/Exporter%3A%3ATiny">Exporter::Tiny</a> entirely. <a class="podlinkpod" href="https://metacpan.org/module/Types%3A%3ALoadableClass">Types::LoadableClass</a> has been released, inspired by <a class="podlinkpod" href="https://metacpan.org/module/MooseX%3A%3ATypes%3A%3ALoadableClass">MooseX::Types::LoadableClass</a> (which has also been updated this month).</li>
			<li>A new <a class="podlinkpod" href="https://metacpan.org/module/Throwable">Throwable</a> has been released; no exciting changes, but hints in the changelog of interesting things to come.</li>
			<li><a class="podlinkpod" href="https://metacpan.org/module/Mouse">Mouse</a> 1.13 has been released, containing a fix for bleeding-edge Perl.</li>
			<li>Early in October there were a sudden surge of mop-related blog posts, including <a class="podlinkurl" href="http://blogs.perl.org/users/yuki_kimoto/2013/10/the-proposal-of-separating-method-keyword-from-mop.html">The proposal of separating method keyword from mop</a> (already mentioned above), <a class="podlinkurl" href="http://blogs.perl.org/users/buddy_burden/2013/10/pondering-the-mop-up.html">Pondering the Mop Up</a>, and <a class="podlinkurl" href="http://blogs.perl.org/users/maettu/2013/10/mop-for-beginners-1.html">Mop for Beginners</a>.</li>
			<li>I've written these Acme-oop articles about writing code that works across different Perl OO systems. <a class="podlinkurl" href="http://blogs.perl.org/users/toby_inkster/2013/10/acme-oop-ism-part-one.html">Part 1</a>; <a class="podlinkurl" href="http://blogs.perl.org/users/toby_inkster/2013/10/acme-oop-ism-part-two-typetiny.html">part 2</a>; <a class="podlinkurl" href="http://blogs.perl.org/users/toby_inkster/2013/10/acme-oop-ism-part-three-techniques.html">part 3</a>.</li>
			<li>A little while later we have <a class="podlinkurl" href="http://habrahabr.ru/post/198274/">Metaobject Protocol для базового Perl 5</a>. Don't worry; there's an <a class="podlinkurl" href="http://blogs.perl.org/users/btyler/2013/10/a-metaobject-protocol-for-core-perl-5-translated-from-russian.html">English translation</a>.</li>
			<li>Ovid has posted some helpful advice about <a class="podlinkurl" href="http://blogs.perl.org/users/ovid/2013/10/how-to-use-the-debugger-with-moose.html">how to use the Perl debugger with Moose</a>.</li>
			<li>Yuki Kimoto has blogged on <a class="podlinkurl" href="http://blogs.perl.org/users/yuki_kimoto/2013/10/advantage-of-encupsulation-in-oo-programming.html">the advantage of encupsulation in OO programming</a> which appears to follow on from some <a class="podlinkurl" href="http://blogs.perl.org/users/yuki_kimoto/2013/10/list-shortage-of-perl.html#comments">comments on a previous post of his</a>.</li>
			<li>A policy of <a class="podlinkurl" href="http://www.ctvnews.ca/canada/two-boaters-fined-for-harassing-moose-swimming-in-northern-ontario-lake-1.1478624">monetary fines for people abusing Moose</a>. <b>You have been warned!</b></li>
		</ul>
]]>
    </content>
</entry>
